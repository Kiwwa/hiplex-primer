{"name":"Hiplex-primer","tagline":"A tool for generating primers for the Hi-Plex targeted, multiplexed DNA sequencing strategy","body":"### How to design primers for Hi-Plex\r\n\r\n#### 1. Download the Hiplex primer software.\r\n\r\nYou can download the software from [github](https://github.com/bjpop/hiplex-primer/archive/master.zip).\r\n\r\n#### 2. Check your Python version.\r\n\r\nHiplex primer is designed to work with Python 2.6 or 2.7. It _will not_ work with Python 3.\r\n\r\n#### 3. Make sure BioPython is installed for your version of Python.\r\n\r\n[Instructions for installing BioPython](http://biopython.org/DIST/docs/install/Installation.html).\r\n\r\n#### 4. Download a copy of all the chromosome reference files in FASTA format. \r\n\r\nCreate a folder containing all the chromosome reference files in fasta format. This is the `--refdir` argument in the command line. In our example, this folder is called `primer_finder_data` and looks like so:\r\n\r\n```\r\nchr1.fa\r\nchr2.fa\r\nchr3.fa\r\n```\r\n\r\netcetera.\r\n\r\n4. The input file is a tab-separated file, listing all the target regions in a bed file-type format. There is one column for the chromosome number, one column for the starting coordinate of the target region, and one column for the end coordinate. The fourth column should list the gene/region name. This is important, as it is used by the software to determine primer names. This is called `--genes` in the command line. In our example, this file is called exon_list.txt and looks like so:\r\n5. When in the directory where the software has been downloaded, run the following command (the values are indicative only and should be tailored to the user needs):\r\n\r\n```\r\n./Primer_design.py --refdir <dir containing references in fasta format>\r\n    --genes <coordinates input file>\r\n    --blocksize 100\r\n    --maxprimersize 30\r\n    --primervar 10\r\n    --splicebuffer 8\r\n    --melt 64\r\n    --log <log_file_name.log>\r\n    --idtfile <output_file_name.csv>\r\n    --maxhairpinsize 30\r\n    --blocksizevar 0\r\n    --scale 25nmole\r\n    --purification Standard Desalting\r\n```\r\n\r\n6. A log file is also produced. Its name is defined in the command line by the argument `--log`. In our example, this log file is called genes_coords.log. Please note that it records the command line that was used.\r\n\r\n\r\nUsing our example files, the specific command you should type in is:\r\n\r\n```\r\n./Primer_design.py \r\n    --refdir /primer_finder_data \r\n    --genes genes_coords.tsv \r\n    --blocksize 100 \r\n    --maxprimersize 30 \r\n    --primervar 10\r\n    --splicebuffer 8 \r\n    --melt 64 \r\n    --log genes_coords.log \r\n    --idtfile gene.idt.csv \r\n    --maxhairpinsize 30 \r\n    --blocksizevar 0 \r\n    --scale 25nmole \r\n    --purification Standard Desalting\r\n```\r\n\r\nIn this example, we have saved the reference fasta files in the same directory as the script in primer_finder_data, our target region list is a file called genes_coords.tsv. We have set the primer-intervening sequence to 100 bases, the maximum primer size is 30 bases, we are allowing primer length to vary by 10 bases, we are allowing for a buffer of 8 additional bases on each side of the target regions listed in genes_coords.tsv in order to account for splice sites, we have set our optimum melting temperature to 64ºC, the log file is called genes_coords.log, we do not allow for primer-intervening sequence to vary in size, we want to order our oligos in the 25 nmole scale, with standard purification.\r\n\r\nBefore ordering the primers, remember to add the 5’heel clamps to each of the Forward and Reverse primers as described in our publication (Fwd: ctctctatgggcagtcggtgatt and Rev: ctgcgtgtctccgactcag) [A high-plex PCR approach for massively parallel sequencing. BioTechniques, Vol. 55, No. 2, August 2013, pp. 69–74].","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}